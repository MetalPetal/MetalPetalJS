//
//  MTISIMDTypeKVCSupport.m
//  MetalPetalJS
//
//  Created by Yu Ao on 2018/6/25.
//
//  Auto generated by generate-simd-kvc-support.sh

#import "MTISIMDTypeKVCSupport.h"
@import ObjectiveC;

FOUNDATION_EXPORT void MTISIMDTypeExportToJSContext(JSContext *context) {
    [context setObject:@{
                        @"float2": @(MTISIMDTypeFloat2),
                        @"float3": @(MTISIMDTypeFloat3),
                        @"float4": @(MTISIMDTypeFloat4),
                        @"double2": @(MTISIMDTypeDouble2),
                        @"double3": @(MTISIMDTypeDouble3),
                        @"double4": @(MTISIMDTypeDouble4),
                        @"int2": @(MTISIMDTypeInt2),
                        @"int3": @(MTISIMDTypeInt3),
                        @"int4": @(MTISIMDTypeInt4),
                        @"uint2": @(MTISIMDTypeUInt2),
                        @"uint3": @(MTISIMDTypeUInt3),
                        @"uint4": @(MTISIMDTypeUInt4),
                        @"float2x2": @(MTISIMDTypeFloat2x2),
                        @"float2x3": @(MTISIMDTypeFloat2x3),
                        @"float2x4": @(MTISIMDTypeFloat2x4),
                        @"float3x2": @(MTISIMDTypeFloat3x2),
                        @"float3x3": @(MTISIMDTypeFloat3x3),
                        @"float3x4": @(MTISIMDTypeFloat3x4),
                        @"float4x2": @(MTISIMDTypeFloat4x2),
                        @"float4x3": @(MTISIMDTypeFloat4x3),
                        @"float4x4": @(MTISIMDTypeFloat4x4),
                        @"double2x2": @(MTISIMDTypeDouble2x2),
                        @"double2x3": @(MTISIMDTypeDouble2x3),
                        @"double2x4": @(MTISIMDTypeDouble2x4),
                        @"double3x2": @(MTISIMDTypeDouble3x2),
                        @"double3x3": @(MTISIMDTypeDouble3x3),
                        @"double3x4": @(MTISIMDTypeDouble3x4),
                        @"double4x2": @(MTISIMDTypeDouble4x2),
                        @"double4x3": @(MTISIMDTypeDouble4x3),
                        @"double4x4": @(MTISIMDTypeDouble4x4),
                        @"int2x2": @(MTISIMDTypeInt2x2),
                        @"int2x3": @(MTISIMDTypeInt2x3),
                        @"int2x4": @(MTISIMDTypeInt2x4),
                        @"int3x2": @(MTISIMDTypeInt3x2),
                        @"int3x3": @(MTISIMDTypeInt3x3),
                        @"int3x4": @(MTISIMDTypeInt3x4),
                        @"int4x2": @(MTISIMDTypeInt4x2),
                        @"int4x3": @(MTISIMDTypeInt4x3),
                        @"int4x4": @(MTISIMDTypeInt4x4),
                        @"uint2x2": @(MTISIMDTypeUInt2x2),
                        @"uint2x3": @(MTISIMDTypeUInt2x3),
                        @"uint2x4": @(MTISIMDTypeUInt2x4),
                        @"uint3x2": @(MTISIMDTypeUInt3x2),
                        @"uint3x3": @(MTISIMDTypeUInt3x3),
                        @"uint3x4": @(MTISIMDTypeUInt3x4),
                        @"uint4x2": @(MTISIMDTypeUInt4x2),
                        @"uint4x3": @(MTISIMDTypeUInt4x3),
                        @"uint4x4": @(MTISIMDTypeUInt4x4),

                        }
     forKeyedSubscript:@"MTISIMDType"];
}

void MTISetSIMDValueForKey(id object, NSString *key, MTIVector *value, MTISIMDType type) {
    NSCParameterAssert(key.length > 0);
    SEL selector = NSSelectorFromString([[[@"set" stringByAppendingString:[[key substringToIndex:1] uppercaseString]] stringByAppendingString:[key substringFromIndex:1]] stringByAppendingString:@":"]);
    switch (type) {
        case MTISIMDTypeFloat2: {
            typedef void (*msgSendType)(id, SEL, simd_float2);
            ((msgSendType)objc_msgSend)(object, selector, [value float2Value]);
        } break;
        case MTISIMDTypeFloat3: {
            typedef void (*msgSendType)(id, SEL, simd_float3);
            ((msgSendType)objc_msgSend)(object, selector, [value float3Value]);
        } break;
        case MTISIMDTypeFloat4: {
            typedef void (*msgSendType)(id, SEL, simd_float4);
            ((msgSendType)objc_msgSend)(object, selector, [value float4Value]);
        } break;
        case MTISIMDTypeFloat4x4: {
            typedef void (*msgSendType)(id, SEL, simd_float4x4);
            ((msgSendType)objc_msgSend)(object, selector, [value float4x4Value]);
        } break;

        default: {
            NSCAssert(NO, @"");
        } break;
    }
}

MTIVector * MTIGetSIMDValueForKey(id object, NSString *key, MTISIMDType type) {
    NSCParameterAssert(key.length > 0);
    SEL selector = NSSelectorFromString(key);
    switch (type) {
        case MTISIMDTypeFloat2: {
            typedef simd_float2 (*msgSendType)(id, SEL);
            simd_float2 v = ((msgSendType)objc_msgSend)(object, selector);
            return [MTIVector vectorWithFloat2:v];
        } break;
        case MTISIMDTypeFloat3: {
            typedef simd_float3 (*msgSendType)(id, SEL);
            simd_float3 v = ((msgSendType)objc_msgSend)(object, selector);
            return [MTIVector vectorWithFloat3:v];
        } break;
        case MTISIMDTypeFloat4: {
            typedef simd_float4 (*msgSendType)(id, SEL);
            simd_float4 v = ((msgSendType)objc_msgSend)(object, selector);
            return [MTIVector vectorWithFloat4:v];
        } break;
        case MTISIMDTypeFloat4x4: {
            typedef simd_float4x4 (*msgSendType)(id, SEL);
            simd_float4x4 v = ((msgSendType)objc_msgSend)(object, selector);
            return [MTIVector vectorWithFloat4x4:v];
        } break;

        default: {
            NSCAssert(NO, @"");
        } break;
    }
    return nil;
}